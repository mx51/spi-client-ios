//
//  SPISettlementTests.m
//  Tests
//
//  Created by Amir Kamali on 18/6/18.
//  Copyright Â© 2018 mx51. All rights reserved.
//

#import <XCTest/XCTest.h>
#import "SPISettlement.h"
#import "SPIPurchaseHelper.h"
#import "NSDate+Util.h"
#import "SPIClient.h"
#import "SPIClient+Internal.h"
#import "SPITestUtils.h"

@interface SPISettlementTests : XCTestCase

@end

@implementation SPISettlementTests

- (void)testSettlementEnquiry {
    NSString *jsonStr = @"{\"data\":{\"accumulated_purchase_count\":\"1\",\"accumulated_purchase_value\":\"1000\",\"accumulated_refund_count\":\"1\",\"accumulated_refund_value\":\"-1000\",\"accumulated_settle_by_acquirer_count\":\"0\",\"accumulated_settle_by_acquirer_value\":\"0\",\"accumulated_total_count\":\"2\",\"accumulated_total_value\":\"0\",\"bank_date\":\"18062018\",\"bank_time\":\"011720\",\"host_response_code\":\"000\",\"host_response_text\":\"APPROVED\",\"merchant_acquirer\":\"EFTPOS FROM WESTPAC\",\"merchant_address\":\"213 Miller Street\",\"merchant_city\":\"Sydney\",\"merchant_country\":\"Australia\",\"merchant_name\":\"Merchant4\",\"merchant_postcode\":\"2060\",\"merchant_receipt\":\"EFTPOS FROM WESTPAC\\r\\nMerchant4\\r\\n213 Miller Street\\r\\nSydney 2060\\r\\n\\r\\nAustralia\\r\\n\\r\\n\\r\\n SETTLEMENT INQUIRY\\r\\nTSP     100312348845\\r\\nTIME   18JUN18 01:17\\r\\nTRAN   000148-000149\\r\\nFROM   17JUN18 20:15\\r\\nTO     18JUN18 01:17\\r\\n\\r\\nDebit\\r\\nREF     1    $-10.00\\r\\nTOT     1    $-10.00\\r\\n\\r\\nMasterCard\\r\\nPUR     1     $10.00\\r\\nTOT     1     $10.00\\r\\n\\r\\nVisa\\r\\nTOT     0      $0.00\\r\\n\\r\\nSTOTAL  0      $0.00\\r\\n\\r\\nAmex\\r\\nTOT     0      $0.00\\r\\n\\r\\nDiners\\r\\nTOT     0      $0.00\\r\\n\\r\\nJCB\\r\\nTOT     0      $0.00\\r\\n\\r\\nUnionPay\\r\\nTOT     0      $0.00\\r\\n\\r\\nTOTAL\\r\\nPUR     1     $10.00\\r\\nREF     1    $-10.00\\r\\nTOT     2      $0.00\\r\\n\\r\\n   (000) APPROVED\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"schemes\":[{\"scheme_name\":\"Debit\",\"settle_by_acquirer\":\"Yes\",\"total_count\":\"1\",\"total_refund_count\":\"1\",\"total_refund_value\":\"-1000\",\"total_value\":\"-1000\"},{\"scheme_name\":\"MasterCard\",\"settle_by_acquirer\":\"Yes\",\"total_count\":\"1\",\"total_purchase_count\":\"1\",\"total_purchase_value\":\"1000\",\"total_value\":\"1000\"},{\"scheme_name\":\"Visa\",\"settle_by_acquirer\":\"Yes\",\"total_count\":\"0\",\"total_value\":\"0\"},{\"scheme_name\":\"Amex\",\"settle_by_acquirer\":\"No\",\"total_count\":\"0\",\"total_value\":\"0\"},{\"scheme_name\":\"Diners\",\"settle_by_acquirer\":\"No\",\"total_count\":\"0\",\"total_value\":\"0\"},{\"scheme_name\":\"JCB\",\"settle_by_acquirer\":\"No\",\"total_count\":\"0\",\"total_value\":\"0\"},{\"scheme_name\":\"UnionPay\",\"settle_by_acquirer\":\"No\",\"total_count\":\"0\",\"total_value\":\"0\"}],\"settlement_period_end_date\":\"18Jun18\",\"settlement_period_end_time\":\"01:17\",\"settlement_period_start_date\":\"17Jun18\",\"settlement_period_start_time\":\"20:15\",\"settlement_triggered_date\":\"18Jun18\",\"settlement_triggered_time\":\"01:17:20\",\"stan\":\"000000\",\"success\":true,\"terminal_id\":\"100312348845\",\"transaction_range\":\"000148-000149\"},\"datetime\":\"2018-06-18T01:17:32.291\",\"event\":\"settlement_enquiry_response\",\"id\":\"stlenq3\"}";
    
    NSDictionary *jsonObject = [NSJSONSerialization JSONObjectWithData:[jsonStr dataUsingEncoding:NSUTF8StringEncoding] options:0 error:nil];
    
    SPIMessage *msg = [[SPIMessage alloc] initWithDict:jsonObject];
    SPISettlement *response  = [[SPISettlement alloc] initWithMessage:msg];
    XCTAssertEqual([response getSettleByAcquirerCount], 0);
    XCTAssertEqual([response getSettleByAcquirerValue], 0);
    XCTAssertEqual([response getTotalCount], 2);
    XCTAssertEqual([response getTotalValue], 0);
    XCTAssertEqual([response getSettleByAcquirerCount], 0);
    XCTAssertTrue([[[response getPeriodStartTime] toString] isEqualToString:@"2018-06-17T20:15:00.000"]);
    XCTAssertTrue([[[response getPeriodEndTime] toString] isEqualToString:@"2018-06-18T01:17:00.000"]);
    XCTAssertNotNil([response getTriggeredTime]);
    XCTAssertTrue([[response getResponseText] isEqualToString:@"APPROVED"]);
    XCTAssertNotNil([response getMerchantReceipt]);
    XCTAssertTrue([[response getTransactionRange] isEqualToString:@"000148-000149"]);
    XCTAssertTrue([[response getTerminalId] isEqualToString:@"100312348845"]);
    XCTAssertGreaterThan([response getSchemeSettlementEntries].count, 0);
}

- (void)testHandleSettlementResponse {
    SPIClient *client = [SPITestUtils clientWithTestSecrets];
    
    client.deviceApiKey = @"testPos";
    client.testMode = YES;
    client.tenantCode = @"gko";
    client.transactionReport = [SPITransactionReportHelper createTransactionReportEnvelope:@"test" posVersion:@"2.8.0" libraryLanguage:@"ios" libraryVersion:@"2.8.0" serialNumber:@"555-555-555"];
    // Initiate request
    client.state.status = SPIStatusPairedConnected;
    [client initiateSettleTx:@"TEST" completion:^(SPIInitiateTxResult *result) {}];
    NSString *jsonStr = @"{\"enchmac\":\"82D747DCA2764F105BC0CABB41518AD7BE586DA80B0964C224365014C3F2EBAE\"}";
    [client onSpiMessageReceived:jsonStr];
    
    XCTestExpectation *expectation = [[XCTestExpectation alloc] initWithDescription:@"test expectation"];
    (void) [XCTWaiter waitForExpectations:@[expectation] timeout:1];
    
    XCTAssertTrue([client.state.txFlowState.displayMessage isEqualToString:@"Settle transaction ended"]);
}

@end
